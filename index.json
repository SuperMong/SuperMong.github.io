[{"content":"Regular Expression is a powerful and complex tool for processing string. Using it can greatly improve work efficiency, but due to its complexity, novices are often discouraged.\nI have learned regular expression many times, but I forget everytime bucause lack of practice. So I writing this blog to remind me that only by using it can learn it.\n","permalink":"https://supermong.github.io/posts/regular-expression-basics/","summary":"Regular Expression is a powerful and complex tool for processing string. Using it can greatly improve work efficiency, but due to its complexity, novices are often discouraged.\nI have learned regular expression many times, but I forget everytime bucause lack of practice. So I writing this blog to remind me that only by using it can learn it.","title":"Regular Expression Basics"},{"content":"Due to the high cost of living in Beijing and my shortage of wages, I have to cook by myself to save some money. But cooking is a pain for me ( I\u0026rsquo;m lazy ), so i bought an air fryer ( It\u0026rsquo;s cheap and easy to use ).\nThis blog is used to record my air fryer recipe.\nFries  Buy semi-finished fries Preheat the air fryer at 180 degrees for 5 minutes Put semi-finished fries in to air fryer Bake at 200 degrees for 10 to 15 minutes  TODO  Orleans Drumsticks Fried Dumpling Steak  ","permalink":"https://supermong.github.io/posts/my-air-fryer-recipe/","summary":"Due to the high cost of living in Beijing and my shortage of wages, I have to cook by myself to save some money. But cooking is a pain for me ( I\u0026rsquo;m lazy ), so i bought an air fryer ( It\u0026rsquo;s cheap and easy to use ).\nThis blog is used to record my air fryer recipe.\nFries  Buy semi-finished fries Preheat the air fryer at 180 degrees for 5 minutes Put semi-finished fries in to air fryer Bake at 200 degrees for 10 to 15 minutes  TODO  Orleans Drumsticks Fried Dumpling Steak  ","title":"My Air Fryer Recipe"},{"content":"Closure is one of the most important features of JavaScript, and its hard to understand. As a JavaScript novice, I write down my understanding of closure here.\nFunction scope Let\u0026rsquo;s start with function scope. The rule of function scope is simple: Inside function can access all the scopes that outside function can access, but outside function can\u0026rsquo;t access inside function\u0026rsquo;s scope.\nfunction outside() { var outVar = \u0026#34;out variable\u0026#34;; function inside() { var inVar = \u0026#34;in variable\u0026#34;; return outVar + \u0026#34; + \u0026#34; + inVar;\t// return: \u0026#34;out variable + in variable\u0026#34;  } return outVar + \u0026#34; + \u0026#34; + inVar;\t// Error: can not access variable \u0026#39;inVar\u0026#39; } What happens if multiple functions are nested?\nfunction A() { var aVar = 1; function B() { var bVar = 2; function C() { var cVar = 3; return aVar + bVar + cVar;\t// returnï¼š1 + 2 + 3 = 6  } } } Function A contains function B, so B can access A. Then B contains function C, so C can access B which can access A, therefore C can access A. This is called scope chaining.\nClosure The scope rule of function mentioned earlier lead to two results:\n Variables of inner function are encapsulated If inner function survive beyond the life of the outer function, the scope of outer function can also survive with inner function ( Because it is still been accessed by inner function )  When inner function is accessed outside the scope of the outer function, a closure is created. Using closure, we can access the variables inside the function and keep these variables in momory.\nA simple example:\nfunction outer() { var outerVar = 0; return function inner() { outerVar += 1; return outerVar; } } var innerFunc = outer(); innerFunc();\t// 1 innerFunc();\t// 2 The variable outerVar in function outer survive with innerFunc, we can access it by calling innerFunc.\nNotice: Closure keep all variables in the memory, the memory consumption is large. Don\u0026rsquo;t abuse closure.\n","permalink":"https://supermong.github.io/posts/javascript-closure/","summary":"Closure is one of the most important features of JavaScript, and its hard to understand. As a JavaScript novice, I write down my understanding of closure here.\nFunction scope Let\u0026rsquo;s start with function scope. The rule of function scope is simple: Inside function can access all the scopes that outside function can access, but outside function can\u0026rsquo;t access inside function\u0026rsquo;s scope.\nfunction outside() { var outVar = \u0026#34;out variable\u0026#34;; function inside() { var inVar = \u0026#34;in variable\u0026#34;; return outVar + \u0026#34; + \u0026#34; + inVar;\t// return: \u0026#34;out variable + in variable\u0026#34;  } return outVar + \u0026#34; + \u0026#34; + inVar;\t// Error: can not access variable \u0026#39;inVar\u0026#39; } What happens if multiple functions are nested?","title":"JavaScript Closure"},{"content":"Same as all ( maybe ) programming languages, JavaScript has some statements for loop:\n while do\u0026hellip;while for for\u0026hellip;in for\u0026hellip;of label break and continue  Most of them are common in other languages, I only introduce for...in, for...of and label here.\nfor\u0026hellip;in The for...in is a statement can traverse all enumerable properties of an object.\nfor (variable in object) { statements } The following function can return a string that lists the propertie names and their values:\nfunction list(obj) { let result = \u0026#34;\u0026#34;; for (let i in obj) { result += i + \u0026#34;: \u0026#34; + obj[i] + \u0026#34; \u0026#34;; } return result; } For an object person with properties name and sex, list(person) will return \u0026ldquo;name: SuperMong sex: male \u0026ldquo;.\nNotice: If you want to traverse enumerable properties of an object, for...in is a good choice. But for an array (map, set, and so on), for...in will traverse user-defined properties, not array elements.\nfor\u0026hellip;of Dirrerent from for...in, for...of statement traverse values of an object.\nfor (variable of object) { statements } The following code can make it clearly:\nvar arr = [5, 2, 6]; let sum = 0; for (let n of arr) { sum += n; // The value of sum is 5 + 2 + 6 = 13; } label The label can identify statements. It always be used with break and continue to control loops.\nlabel: statements A simple example:\nlet x = 0; someLoop: while (true) { x += 1; let y = 0; while (true) { y += 1; if (y === 9) { break someLoop; } } } ","permalink":"https://supermong.github.io/posts/javascript-loop-and-iteration/","summary":"Same as all ( maybe ) programming languages, JavaScript has some statements for loop:\n while do\u0026hellip;while for for\u0026hellip;in for\u0026hellip;of label break and continue  Most of them are common in other languages, I only introduce for...in, for...of and label here.\nfor\u0026hellip;in The for...in is a statement can traverse all enumerable properties of an object.\nfor (variable in object) { statements } The following function can return a string that lists the propertie names and their values:","title":"JavaScript Loop and Iteration"},{"content":"Since I used git, I have always wanted to know how to write a concise and clear commit message? After entering the job, I found that Angular\u0026rsquo;s specification is the most popular specification. So, let\u0026rsquo;s start learning it.\nCommit Message Format Each commit message consists of a header, a body and a footer:\n\u0026lt;header\u0026gt; \u0026lt;BLANK LINE\u0026gt; \u0026lt;body\u0026gt; \u0026lt;BLANK LINE\u0026gt; \u0026lt;footer\u0026gt; Header A commit message must has header, and it has its own format:\n\u0026lt;type\u0026gt;(\u0026lt;scope\u0026gt;): \u0026lt;short summary\u0026gt;\nThe type field is mandatory, must be one of following:\n build: Changes that affect the build system or external dependencies ci: Changes to our CI configuration files and scripts docs: Documentation only changes feat: A new feature fix: A bug fix pref: A code change that improves performance refactor: A code change that neither fixes a bug nor adds a feature test: Adding missing tests or correcting existing tests  The scope field is optional, should be the name of the package affected.\nAnd summary is the description of the commit. It\u0026rsquo;s also mandatory and there are some rules to write it:\n use imperative don\u0026rsquo;t capitalize the first letter no dot (.) at the end  Body If commit type is docs, then body is required, In other cases, it\u0026rsquo;s optional.\nJust like summary, explain why you are making the change.\nFooter The footer can contain information for breaking changes and deprecations, and is also a place to reference issues.\n","permalink":"https://supermong.github.io/posts/how-to-wirte-git-commit-message/","summary":"Since I used git, I have always wanted to know how to write a concise and clear commit message? After entering the job, I found that Angular\u0026rsquo;s specification is the most popular specification. So, let\u0026rsquo;s start learning it.\nCommit Message Format Each commit message consists of a header, a body and a footer:\n\u0026lt;header\u0026gt; \u0026lt;BLANK LINE\u0026gt; \u0026lt;body\u0026gt; \u0026lt;BLANK LINE\u0026gt; \u0026lt;footer\u0026gt; Header A commit message must has header, and it has its own format:","title":"How to write a commit message in Git?"},{"content":"Hello world, I\u0026rsquo;m SuperMong, come from China.\nThis is my first post on the blog. In the future, I will post some of my study notes and essays in English ( A challenge ).\nIt\u0026rsquo;s not clear yet, but this is the list of notes I am going to post:\n   note state     HTML undo   JavaScript undo   TypeScript undo   Design Patterns (GoF) undo   Docker undo    ","permalink":"https://supermong.github.io/posts/my-first-post/","summary":"Hello world, I\u0026rsquo;m SuperMong, come from China.\nThis is my first post on the blog. In the future, I will post some of my study notes and essays in English ( A challenge ).\nIt\u0026rsquo;s not clear yet, but this is the list of notes I am going to post:\n   note state     HTML undo   JavaScript undo   TypeScript undo   Design Patterns (GoF) undo   Docker undo    ","title":"My First Post"}]